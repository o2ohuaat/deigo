// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SERVERMESSAGERECEIVED_MSG_MESSAGE_H_
#define FLATBUFFERS_GENERATED_SERVERMESSAGERECEIVED_MSG_MESSAGE_H_

#include "flatbuffers.h"

namespace Msg {
namespace Message {

struct Received;

struct Received FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MESSAGEID = 4,
    VT_PLATFORM = 6,
    VT_DEVICE = 8
  };
  uint64_t messageId() const { return GetField<uint64_t>(VT_MESSAGEID, 0); }
  uint8_t platform() const { return GetField<uint8_t>(VT_PLATFORM, 0); }
  const flatbuffers::String *device() const { return GetPointer<const flatbuffers::String *>(VT_DEVICE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_MESSAGEID) &&
           VerifyField<uint8_t>(verifier, VT_PLATFORM) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DEVICE) &&
           verifier.Verify(device()) &&
           verifier.EndTable();
  }
};

struct ReceivedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_messageId(uint64_t messageId) { fbb_.AddElement<uint64_t>(Received::VT_MESSAGEID, messageId, 0); }
  void add_platform(uint8_t platform) { fbb_.AddElement<uint8_t>(Received::VT_PLATFORM, platform, 0); }
  void add_device(flatbuffers::Offset<flatbuffers::String> device) { fbb_.AddOffset(Received::VT_DEVICE, device); }
  ReceivedBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ReceivedBuilder &operator=(const ReceivedBuilder &);
  flatbuffers::Offset<Received> Finish() {
    auto o = flatbuffers::Offset<Received>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Received> CreateReceived(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t messageId = 0,
   uint8_t platform = 0,
   flatbuffers::Offset<flatbuffers::String> device = 0) {
  ReceivedBuilder builder_(_fbb);
  builder_.add_messageId(messageId);
  builder_.add_device(device);
  builder_.add_platform(platform);
  return builder_.Finish();
}

inline const Msg::Message::Received *GetReceived(const void *buf) { return flatbuffers::GetRoot<Msg::Message::Received>(buf); }

inline bool VerifyReceivedBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Msg::Message::Received>(); }

inline void FinishReceivedBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Msg::Message::Received> root) { fbb.Finish(root); }

}  // namespace Message
}  // namespace Msg

#endif  // FLATBUFFERS_GENERATED_SERVERMESSAGERECEIVED_MSG_MESSAGE_H_
